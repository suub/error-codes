
Archived entries from file /home/kima/programming/error-codes/error-codes.org


* Testing the error-codes
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-05-01 Do 20:54
  :ARCHIVE_FILE: ~/programming/error-codes/error-codes.org
  :ARCHIVE_CATEGORY: error-codes
  :END:
  #+begin_src clojure :ns error-codes.test-core :tangle src/error_codes/test_core.clj
    (deftest test-error-codes
      (is (= (error-codes "a" "b")
             '([[1 1] [0 0]])))
      (is (= (error-codes "kitten" "sitting")
             '([[1 1] [0 0]] [[1 1] [4 4]] [[8 1] [6 6]])))
      (is (= (error-codes "m" "rn"))))
  #+end_src 









* Helpers for deployment to ocr-visualizer
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-05-01 Do 22:05
  :ARCHIVE_FILE: ~/programming/error-codes/error-codes.org
  :ARCHIVE_CATEGORY: error-codes
  :END:
  doesn't belong to the code - ignore
  #+begin_src clojure :ns error-codes.core :tangle src/error_codes/core.clj
    (use 'clojure.java.io)
    (defn get-files-sorted [dir]
      (->> (file-seq (file dir))
           rest
           (sort-by #(.getName  %))))
    #_(file-locations for now... "/home/kima/programming/ocr-visualizer/resources/public/ground-truth/" "/home/kima/programming/ocr-visualizer/resources/public/edits," "/home/kima/programming/ocr-visualizer/resources/public/ocr-results/")

    (defn deploy-error-codes []
      (let [gts (get-files-sorted "/home/kima/programming/ocr-visualizer/resources/public/ground-truth/")
            ocr-res (get-files-sorted "/home/kima/programming/ocr-visualizer/resources/public/ocr-results/")]
        (doall (pmap (fn [gt ocr]
                       (let [filename (str "/home/kima/programming/ocr-visualizer/resources/public/edits/" (.getName gt))]
                         (spit filename (pr-str (error-codes (slurp gt) (slurp ocr))))))
                     gts ocr-res))))

  #+end_src 

  #+RESULTS:
  : #'error-codes.core/deploy-error-codes







